class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        queue,visited=collections.deque([["0000",0]]),set(deadends)
        def next_combinations(current):
            next_combs=set()
            for i in range(4):
                m,p=str((int(current[i])-1)%10),str((int(current[i])+1)%10)
                next_combs.add(current[:i]+m+current[i+1:])
                next_combs.add(current[:i]+p+current[i+1:])
            return next_combs
        while queue:
            current,steps=queue.popleft()
            if current in visited:continue
            visited.add(current)
            if  current==target: return steps
            for next in next_combinations(current):
                if next in visited: continue
                queue.append([next,steps+1])
            #print(queue)
        return -1
