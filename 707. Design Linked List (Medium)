class MyLinkedList:

    def __init__(self):
        self.head=None
        self.size=0
        

    def get(self, index: int) -> int:
        if index<0 or index>=self.size or self.head==None: return -1
        temp=self.head
        while index>0:
            temp=temp.next
            index-=1
        return temp.val
        

    def addAtHead(self, val: int) -> None:
        tba=Node(val)
        tba.next=self.head
        self.head=tba
        self.size+=1
        

    def addAtTail(self, val: int) -> None:
        if not self.head:
            self.head=Node(val)
        else:
            temp=self.head
            while temp.next:
                temp=temp.next
            temp.next=Node(val)
        self.size+=1

    def addAtIndex(self, index: int, val: int) -> None:
        if index < 0 or index > self.size:
            return

        if index == 0:
            self.addAtHead(val)
        else:
            curr = self.head
            for i in range(index - 1):
                curr = curr.next
            node = Node(val)
            node.next = curr.next
            curr.next = node

            self.size += 1
                
        

    def deleteAtIndex(self, index: int) -> None:
        if index < 0 or index >= self.size:
            return

        curr = self.head
        if index == 0:
            self.head = curr.next
        else:
            for i in range(index - 1):
                curr = curr.next
            curr.next = curr.next.next

        self.size -= 1
class Node:

    def __init__(self, val):
        self.val = val
        self.next = None
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
