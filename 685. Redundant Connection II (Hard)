class Solution:
    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:
        parent={i:0 for i in range(1,len(edges)+1)}
        ans1,ans2=None,None
        for u,v in edges:
            #print(u,v)
            if parent[v]==0:
                parent[v]=u
            else:
                ans1=[parent[v],v]
                ans2=[u,v]
        parent={i:i for i in range(1,len(edges)+1)} 
        
        def find_parent(node):
            if parent[node]==node:
                return node
            return find_parent(parent[node])
        for u,v in edges:
            if [u,v]==ans2: continue
            parent_u,parent_v=find_parent(u),find_parent(v)
            if parent_u==parent_v:
                return ans1 if ans1 else [u,v]
            parent[parent_v]=u
        return ans2
