#### Solution 1 ####
class Solution:
    def findMin(self, nums: List[int]) -> int:
        n=len(nums)
        l,r=0,n-1
        while l<r:
            mid=(l+r)//2
            if (mid-1<0 or nums[mid]<nums[mid-1]) and (mid+1>=n or nums[mid]<nums[mid+1]):
                return nums[mid]
            elif nums[mid]>nums[l] and nums[mid]>nums[r]:
                if nums[l]>nums[r]:
                    l=mid+1
                else:
                    r=mid-1
            elif nums[mid]<nums[l] and nums[mid]<nums[r]:
                if nums[l]>nums[r]:
                    r=mid-1
                else:
                    l=mid+1
            elif nums[mid]>nums[l]:
                r=mid-1
            elif nums[mid]>nums[r]:
                l=mid+1
        return nums[l]
                
                
#### Solution 2 ####
class Solution:
    def findMin(self, nums: List[int]) -> int:
        n=len(nums)
        l,r=0,n-1
        while l<r:
            mid=l + (r-l)//2
            if (mid-1<0 or nums[mid]<nums[mid-1]) and (mid+1>=n or nums[mid]<nums[mid+1]):
                return nums[mid]
            if nums[l]<=nums[mid] and nums[mid]>nums[r]:
                l=mid+1
            else:
                r=mid-1
        return nums[l]
