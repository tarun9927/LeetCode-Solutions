# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        parent={root:[None,0]}
        def traverse(root,depth):
            if root:
                if root.left:
                    parent[root.left]=[root,depth+1]
                    traverse(root.left,depth+1)
                if root.right:
                    parent[root.right]=[root,depth+1]
                    traverse(root.right,depth+1)
        traverse(root,0)
        is_q_deeper=None
        if parent[p][1]!=parent[q][1]:
            temp,k,is_q_deeper=q,parent[p][1],True
            if parent[p][1]>parent[q][1]:
                temp,k,is_q_deeper=p,parent[q][1],False
            while parent[temp][1]!=k:
                temp=parent[temp][0]
            if temp==p or temp==q: return temp
        if is_q_deeper==True:
            q=temp
        elif is_q_deeper==False:
            p=temp
        while parent[p][0]!=parent[q][0]:
            p=parent[p][0]
            q=parent[q][0]
        return parent[p][0]
