#### BFS Solution | Accepted ####
class Solution:
    def minReorder(self, n: int, connections: List[List[int]]) -> int:
        edges={(u,v) for u,v in connections}
        visited,neighbors,ans={0:True},{i:[] for i in range(n)},0
        for u,v in edges:
            neighbors[u].append(v)
            neighbors[v].append(u)
        queue=[0]
        while queue:
            u=queue.pop(0)
            for v in neighbors[u]:
                if v not in visited:
                    if (v,u) not in edges:
                        ans+=1
                    visited[v]=True
                    queue.append(v)
        return ans
        
        
        
#### DFS Solution | accepted ####
class Solution:
    def minReorder(self, n: int, connections: List[List[int]]) -> int:
        edges={(u,v) for u,v in connections}
        visited,neighbors,self.ans={0:True},{i:[] for i in range(n)},0
        for u,v in edges:
            neighbors[u].append(v)
            neighbors[v].append(u)
        def traverse(node):
            for neighbor in neighbors[node]:
                if neighbor not in visited:
                    if (neighbor,node) not in edges:
                        self.ans+=1
                    visited[neighbor]=True
                    traverse(neighbor)
        traverse(0)
        return self.ans
