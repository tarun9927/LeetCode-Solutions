class Solution:
    def count_islands(self,gd):
        n,m,count=len(gd),len(gd[0]),0
        def rem_island(i,j):
            queue=[[i,j]]
            while queue:
                i,j=queue.pop(0)
                if not gd[i][j]: continue
                gd[i][j]=0
                for x,y in [[1,0],[-1,0],[0,1],[0,-1]]:
                    ni,nj=i+x,j+y
                    if 0<=ni<n and 0<=nj<m and gd[ni][nj]:
                        queue.append([ni,nj])
        for i in range(n):
            for j in range(m):
                if gd[i][j]:
                    count+=1
                    rem_island(i,j)
        return count
    def minDays(self, grid: List[List[int]]) -> int:
        n,m=len(grid),len(grid[0])
        ng=copy.deepcopy(grid)
        if self.count_islands(ng)!=1: return 0
        for i in range(n):
            for j in range(m):
                if grid[i][j]:
                    ng=copy.deepcopy(grid)
                    ng[i][j]=0
                    if self.count_islands(ng)!=1: return 1
        return 2
