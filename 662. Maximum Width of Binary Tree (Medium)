# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def widthOfBinaryTree(self, root: TreeNode) -> int:
        widths,self.ans={},0
        def traverse(root,lvl,sn):
            if root:
                if lvl not in widths: widths[lvl]=[float("inf"),float("-inf")]
                widths[lvl][0],widths[lvl][1]=min(widths[lvl][0],sn),max(widths[lvl][1],sn)
                self.ans=max(self.ans,(widths[lvl][1]-widths[lvl][0])+1)
                traverse(root.left,lvl+1,(sn*2)-1)
                traverse(root.right,lvl+1,sn*2)
        traverse(root,0,1)
        return self.ans
